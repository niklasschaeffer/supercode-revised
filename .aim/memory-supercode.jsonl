{"type":"_aim","source":"mcp-knowledge-graph"}
{"type":"entity","name":"SuperCode Framework","entityType":"framework","observations":["Agent-based development framework","React/TypeScript architecture","MCP server integration","20+ specialized agents","15+ functional commands","Template standardization system","Initialized with /initialize --knowledge-graph --memory-bank --ultrathink","Knowledge Graph established with 8 entities and 8 relations","Memory Bank files created for project documentation","React 18.2.0 patterns and hooks integrated from Context7","Dual memory architecture operational"]}
{"type":"entity","name":"React Landing Page","entityType":"component","observations":["Built with React 18.2.0","TypeScript configuration","Vite build system","Tailwind CSS styling","Radix UI components","Responsive design"]}
{"type":"entity","name":"Agent System","entityType":"architecture","observations":["Orchestrator as primary coordinator","Engineering specialists (Backend, Frontend, QA, Security)","Architecture & Analysis specialists","Workflow & Management agents","Specialized tools (Context Refinement, Generator)"]}
{"type":"entity","name":"MCP Integration","entityType":"system","observations":["11 MCP servers integrated","Chrome DevTools, Context7, Forgejo","In-Memoria, Mimik, Playwright","Prompt Kit, Shadcn, Sequential","Tavily, Desktop Commander","11 MCP servers successfully integrated","Context7 provided React best practices","Memory systems (In-Memoria, Knowledge Graph, Memory Bank) operational","Development tools (Chrome DevTools, Desktop Commander) connected"]}
{"type":"entity","name":"Command System","entityType":"interface","observations":["15+ functional commands","/initialize, /load, /save, /spawn","Standardized command templates","Flag-based parameter system","Workflow automation"]}
{"type":"entity","name":"Orchestrator Agent","entityType":"agent","context":"supercode","location":"project","observations":["Central coordination agent","Multi-agent task delegation","Context caching and optimization","Workflow coordination","Task decomposition"]}
{"type":"entity","name":"Component Architecture","entityType":"pattern","context":"supercode","location":"project","observations":["React functional components","Custom hooks pattern","Props drilling management","State management strategies","Component composition","React functional components with hooks pattern","Custom hooks for reusable logic (useFormInput, useData)","Component composition over inheritance","TypeScript interfaces for props","State management with useState and useEffect"]}
{"type":"entity","name":"Development Workflow","entityType":"process","context":"supercode","location":"project","observations":["Template-based development","Agent specialization","MCP server utilization","Quality assurance validation","Continuous integration"]}
{"type":"entity","name":"Memory Integration","entityType":"system","context":"supercode","location":"project","observations":["Knowledge Graph operational with entities and relations","Memory Bank documentation created in project files","In-Memoria patterns from previous load operation","Dual memory architecture established successfully","Cross-session knowledge retention active"]}
{"type":"entity","name":"React Best Practices","entityType":"pattern","context":"supercode","location":"project","observations":["Functional components with hooks","Custom hooks for reusable logic","Component composition patterns","TypeScript interface definitions","State management with useState/useEffect","Data fetching with useEffect and cleanup"]}
{"type":"entity","name":"Initialization_Command","entityType":"command","observations":["Primary bootstrap command for SuperCode framework","Supports --knowledge-graph flag for entity creation","Supports --memory-bank flag for project documentation","Supports --ultrathink flag for deep analysis","Establishes dual memory architecture foundation","Integrates with Context7 for framework documentation","Creates persistent project intelligence across sessions"]}
{"type":"entity","name":"Dual_Memory_Architecture","entityType":"system","observations":["Knowledge Graph for entity relationships and structured knowledge","Memory Bank for project documentation and context management","Cross-session knowledge retention and persistence","Intelligent consolidation with 33% memory reduction","Pattern learning and automatic extraction","Contextual organization (work, personal, project-specific)","Semantic search and intelligent retrieval capabilities"]}
{"type":"entity","name":"SuperCode_Orchestration_Patterns","entityType":"pattern","observations":["Framework Enhancement: context-gathering + generator-specialist + qa-engineer","Full-Stack Development: system-architect + frontend + backend + security + qa","Infrastructure Setup: devops + security + qa-engineer","Quality Improvement: refactoring-expert + qa + context-refinement","Multi-agent coordination with dependency management","Context caching for optimized resource usage","Workflow delegation with precise, context-rich prompts"]}
{"type":"entity","name":"MCP_Server_Ecosystem","entityType":"ecosystem","observations":["11 specialized MCP servers providing extended capabilities","Development Tools: Chrome DevTools, Desktop Commander","Documentation Systems: Context7, Prompt Kit, Shadcn","Version Control: Forgejo for repository management","Memory Systems: Knowledge Graph, Memory Bank, In-Memoria","Testing & Research: Playwright, Sequential, Tavily","Seamless integration with standardized interfaces"]}
{"type":"entity","name":"Quality_Assurance_Framework","entityType":"framework","observations":["Multi-level testing: Unit, Integration, E2E, Performance, Security","Coverage requirements: >85% statement, >80% branch, >90% function","Risk-based approach with critical path priority","Automated validation with template compliance checking","Multi-stage approval process with checklists and reports","Quality gates: pre-commit, pre-merge, release criteria","Continuous improvement with metrics-driven enhancement"]}
{"type":"entity","name":"Behavioral_Control_System","entityType":"system","observations":["25+ behavioral flags for fine-grained execution control","Mode Activation flags: --brainstorm, --introspect, --task-manage, --orchestrate","Analysis Depth flags: --think (~4K tokens), --think-hard (~10K tokens), --ultrathink (~32K tokens)","MCP Server Control: individual server flags, --all-mcp, --no-mcp","Token-efficient communication optimization","Flexible execution behavior and agent interaction patterns"]}
{"type":"entity","name":"Template_Standardization_System","entityType":"system","observations":["Agent Templates with consistent structure and real examples","Command Templates with standardized workflow patterns","MCP Server Templates for documentation and integration","Project Templates for consistent structure and setup","Automated validation with template compliance checking","Version control with template evolution tracking","Cross-referencing with QA system for quality assurance"]}
{"type":"entity","name":"Landing_Page_Technology_Stack","entityType":"technology","observations":["React 18.2.0 with modern hooks and concurrent features","TypeScript 5.2.2 for type safety and enhanced DX","Vite 5.0.8 for fast builds with HMR and optimization","Tailwind CSS 3.3.6 for utility-first styling","Radix UI for accessible component primitives","Responsive design with mobile-first approach","Component composition and custom hooks patterns"]}
{"type":"relation","from":"SuperCode Framework","to":"Agent System","relationType":"contains"}
{"type":"relation","from":"SuperCode Framework","to":"MCP Integration","relationType":"uses"}
{"type":"relation","from":"SuperCode Framework","to":"Command System","relationType":"provides"}
{"type":"relation","from":"Agent System","to":"Orchestrator Agent","relationType":"coordinates"}
{"type":"relation","from":"React Landing Page","to":"Component Architecture","relationType":"implements"}
{"type":"relation","from":"Development Workflow","to":"Command System","relationType":"utilizes"}
{"type":"relation","from":"Component Architecture","to":"React Landing Page","relationType":"guides"}
{"type":"relation","from":"MCP Integration","to":"Development Workflow","relationType":"enables"}
{"type":"relation","from":"Memory Integration","to":"SuperCode Framework","relationType":"enables"}
{"type":"relation","from":"React Best Practices","to":"Component Architecture","relationType":"informs"}
{"type":"relation","from":"Memory Integration","to":"Knowledge Graph","relationType":"utilizes"}
{"type":"relation","from":"React Best Practices","to":"React Landing Page","relationType":"guides"}
{"type":"relation","from":"Initialization_Command","to":"Dual_Memory_Architecture","relationType":"establishes"}
{"type":"relation","from":"Dual_Memory_Architecture","to":"MCP_Server_Ecosystem","relationType":"integrates"}
{"type":"relation","from":"SuperCode_Orchestration_Patterns","to":"MCP_Server_Ecosystem","relationType":"utilizes"}
{"type":"relation","from":"Quality_Assurance_Framework","to":"Template_Standardization_System","relationType":"validates"}
{"type":"relation","from":"Behavioral_Control_System","to":"SuperCode_Orchestration_Patterns","relationType":"controls"}
{"type":"relation","from":"Template_Standardization_System","to":"Landing_Page_Technology_Stack","relationType":"guides"}
{"type":"relation","from":"MCP_Server_Ecosystem","to":"Quality_Assurance_Framework","relationType":"enables"}
{"type":"relation","from":"Landing_Page_Technology_Stack","to":"SuperCode_Orchestration_Patterns","relationType":"implements"}
{"type":"relation","from":"Dual_Memory_Architecture","to":"SuperCode_Orchestration_Patterns","relationType":"informs"}
{"type":"relation","from":"Initialization_Command","to":"MCP_Server_Ecosystem","relationType":"activates"}