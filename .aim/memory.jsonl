{"type":"_aim","source":"mcp-knowledge-graph"}
{"type":"entity","name":"SuperCode_Framework","entityType":"framework","observations":["AI agent framework extending OpenCode capabilities with MCP integrations","19 specialized agents covering development lifecycle from frontend to DevOps","13 core commands for project management and development workflows","11 MCP server integrations for enhanced capabilities","Dual memory system with Knowledge Graph + Memory Bank","25+ behavioral flags for fine-grained control","Template-driven development with standardized patterns","Professional QA system with validation workflows"]}
{"type":"entity","name":"Agent_System","entityType":"architecture","observations":["Hierarchical agent structure with Orchestrator as primary coordinator","19 specialized agents organized by category: Core, Development, Architecture, Quality, Security, Operations, Optimization, Generation, Tools, Analysis, Management, Monitoring, Maintenance","Each agent follows standardized template with triggers, focus areas, tool usage, boundaries, and success metrics","Agents work collaboratively through intelligent orchestration patterns","Context-aware agent selection based on task requirements and domain expertise"]}
{"type":"entity","name":"Command_System","entityType":"system","observations":["13 core commands: initialize, load, save, spawn, implement, build, improve, generate, renovate, cleanup, task, git, troubleshoot","Commands organized by category: Setup, Context, Development, Optimization, Agents, Generation, Maintenance, Management, Tools, Diagnostics","Each command has standardized structure with workflow patterns and examples","Commands support behavioral flags for enhanced execution modes","Integration with MCP servers for extended capabilities"]}
{"type":"entity","name":"MCP_Integration_Layer","entityType":"integration","observations":["11 MCP servers: Chrome DevTools, Context7, Forgejo, Memory Bank, Desktop Commander, Playwright, Prompt Kit, Knowledge Graph, Shadcn, Sequential, Tavily","Categorized by purpose: Development Tools, Documentation, Version Control, Memory Systems, Testing, Research","Seamless integration with behavioral flags for selective activation","Cross-server coordination for complex workflows","Real-time tool access and process management"]}
{"type":"entity","name":"Landing_Page_Implementation","entityType":"application","observations":["React 18.2.0 with TypeScript 5.2.2 for type safety","Vite 5.0.8 as fast build tool with hot module replacement","Tailwind CSS 3.3.6 for utility-first styling","Radix UI components for accessibility","Component-based architecture with functional patterns","Custom hooks for reusable stateful logic","GitHub Pages deployment with automated workflows","Responsive design with mobile optimization"]}
{"type":"entity","name":"QA_System","entityType":"quality_system","observations":["Comprehensive testing standards with unit, integration, E2E, performance, and security testing","Template-based validation with approval checklists and reports","Automated compliance checking with quality gates","Risk-based testing approach with critical path priority","Coverage standards: >85% statement, >80% branch, >90% function coverage","Continuous validation throughout development lifecycle","Professional approval workflows with documentation"]}
{"type":"entity","name":"Template_System","entityType":"development_system","observations":["Standardized templates for agents, commands, MCP servers, and projects","Template compliance validation with automated checking","Real implementation examples replacing placeholders","Consistent structure across all framework components","Template-driven development for rapid scaffolding","Quality assurance built into template system","Version-controlled templates with evolution tracking"]}
{"type":"entity","name":"Memory_Management","entityType":"system","observations":["Dual memory system: Knowledge Graph + Memory Bank","Knowledge Graph for entity relationships and structured knowledge","Memory Bank for project documentation and context storage","33% memory reduction through intelligent consolidation","2-3 session memory limit for sustainable development","Cross-session knowledge retention and pattern learning","Automatic constraint enforcement without user intervention"]}
{"type":"entity","name":"Behavioral_Flags","entityType":"control_system","observations":["25+ behavioral flags for execution control","Mode activation flags: --brainstorm, --introspect, --task-manage, --orchestrate, --token-efficient","MCP server flags for selective integration","Analysis depth flags: --think, --think-hard, --ultrathink","Execution control flags for delegation, concurrency, and validation","Output optimization flags for compression and focus","Priority system with safety-first approach"]}
{"type":"relation","from":"SuperCode_Framework","to":"Agent_System","relationType":"contains"}
{"type":"relation","from":"SuperCode_Framework","to":"Command_System","relationType":"contains"}
{"type":"relation","from":"SuperCode_Framework","to":"MCP_Integration_Layer","relationType":"contains"}
{"type":"relation","from":"SuperCode_Framework","to":"Landing_Page_Implementation","relationType":"implements"}
{"type":"relation","from":"SuperCode_Framework","to":"QA_System","relationType":"uses"}
{"type":"relation","from":"SuperCode_Framework","to":"Template_System","relationType":"uses"}
{"type":"relation","from":"SuperCode_Framework","to":"Memory_Management","relationType":"uses"}
{"type":"relation","from":"SuperCode_Framework","to":"Behavioral_Flags","relationType":"uses"}
{"type":"relation","from":"Agent_System","to":"MCP_Integration_Layer","relationType":"integrates_with"}
{"type":"relation","from":"Command_System","to":"MCP_Integration_Layer","relationType":"integrates_with"}
{"type":"relation","from":"Command_System","to":"Behavioral_Flags","relationType":"supports"}
{"type":"relation","from":"Memory_Management","to":"MCP_Integration_Layer","relationType":"integrates_with"}
{"type":"relation","from":"QA_System","to":"Template_System","relationType":"validates"}
{"type":"relation","from":"Template_System","to":"Agent_System","relationType":"defines_structure_for"}
{"type":"relation","from":"Template_System","to":"Command_System","relationType":"defines_structure_for"}
{"type":"relation","from":"Landing_Page_Implementation","to":"MCP_Integration_Layer","relationType":"demonstrates"}